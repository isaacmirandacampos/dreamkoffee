package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/isaacmirandacampos/finkoffee/internal/interface/graphql/model"
	"github.com/isaacmirandacampos/finkoffee/internal/storage/persistence"
)

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input model.NewExpense) (*model.Expense, error) {
	expense := &model.Expense{
		Name:  input.Name,
		Price: input.Price,
	}

	inserted, err := r.Conn.CreateExpense(ctx, persistence.CreateExpenseParams{
		Name:  expense.Name,
		Price: expense.Price,
	})

	if err != nil {
		return nil, err
	}
	newExpense := &model.Expense{
		ID:        int(inserted.ID),
		Price:     inserted.Price,
		Name:      inserted.Name,
		CreatedAt: inserted.CreatedAt.String(),
		UpdatedAt: inserted.UpdatedAt.String(),
	}
	return newExpense, nil
}

// UpdateExpense is the resolver for the updateExpense field.
func (r *mutationResolver) UpdateExpense(ctx context.Context, id int, input model.UpdateExpense) (*model.Expense, error) {
	expense := &model.Expense{
		ID:    id,
		Name:  input.Name,
		Price: input.Price,
	}

	updated, err := r.Conn.UpdateExpense(ctx, persistence.UpdateExpenseParams{
		ID:    int32(expense.ID),
		Name:  expense.Name,
		Price: expense.Price,
	})

	if err != nil {
		return nil, err
	}

	return &model.Expense{
		ID:        int(updated.ID),
		Name:      updated.Name,
		Price:     updated.Price,
		CreatedAt: updated.CreatedAt.String(),
		UpdatedAt: updated.UpdatedAt.String(),
	}, nil
}

// ListExpense is the resolver for the listExpense field.
func (r *queryResolver) ListExpense(ctx context.Context) ([]*model.Expense, error) {
	expenses, err := r.Conn.ListExpenses(ctx)
	if err != nil {
		return nil, err
	}

	var result []*model.Expense
	for _, expense := range expenses {
		result = append(result, &model.Expense{
			ID:        int(expense.ID),
			Name:      expense.Name,
			Price:     expense.Price,
			CreatedAt: expense.CreatedAt.String(),
			UpdatedAt: expense.UpdatedAt.String(),
		})
	}

	return result, nil
}

// GetExpense is the resolver for the getExpense field.
func (r *queryResolver) GetExpense(ctx context.Context, id int) (*model.Expense, error) {
	exists, err := r.Conn.GetExpense(ctx, int32(id))
	if err != nil {
		return nil, err
	}
	expense := &model.Expense{
		ID:        int(exists.ID),
		Name:      exists.Name,
		Price:     exists.Price,
		CreatedAt: exists.CreatedAt.String(),
		UpdatedAt: exists.UpdatedAt.String(),
	}
	return expense, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
