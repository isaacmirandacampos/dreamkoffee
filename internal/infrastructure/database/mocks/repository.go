// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	persistence "github.com/isaacmirandacampos/dreamkoffee/internal/infrastructure/database/postgres/persistence"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateExpense mocks base method.
func (m *MockRepository) CreateExpense(ctx context.Context, arg *persistence.CreateExpenseParams) (*persistence.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpense", ctx, arg)
	ret0, _ := ret[0].(*persistence.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpense indicates an expected call of CreateExpense.
func (mr *MockRepositoryMockRecorder) CreateExpense(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpense", reflect.TypeOf((*MockRepository)(nil).CreateExpense), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, arg *persistence.CreateUserParams) (*persistence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(*persistence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, arg)
}

// DeleteExpense mocks base method.
func (m *MockRepository) DeleteExpense(ctx context.Context, id int32) (*persistence.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpense", ctx, id)
	ret0, _ := ret[0].(*persistence.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpense indicates an expected call of DeleteExpense.
func (mr *MockRepositoryMockRecorder) DeleteExpense(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpense", reflect.TypeOf((*MockRepository)(nil).DeleteExpense), ctx, id)
}

// ExistsAnUserUsingTheSameEmail mocks base method.
func (m *MockRepository) ExistsAnUserUsingTheSameEmail(ctx context.Context, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsAnUserUsingTheSameEmail", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsAnUserUsingTheSameEmail indicates an expected call of ExistsAnUserUsingTheSameEmail.
func (mr *MockRepositoryMockRecorder) ExistsAnUserUsingTheSameEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsAnUserUsingTheSameEmail", reflect.TypeOf((*MockRepository)(nil).ExistsAnUserUsingTheSameEmail), ctx, email)
}

// GetExpense mocks base method.
func (m *MockRepository) GetExpense(ctx context.Context, id int32) (*persistence.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpense", ctx, id)
	ret0, _ := ret[0].(*persistence.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpense indicates an expected call of GetExpense.
func (mr *MockRepositoryMockRecorder) GetExpense(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpense", reflect.TypeOf((*MockRepository)(nil).GetExpense), ctx, id)
}

// GetLastExpense mocks base method.
func (m *MockRepository) GetLastExpense(ctx context.Context) (*persistence.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastExpense", ctx)
	ret0, _ := ret[0].(*persistence.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastExpense indicates an expected call of GetLastExpense.
func (mr *MockRepositoryMockRecorder) GetLastExpense(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastExpense", reflect.TypeOf((*MockRepository)(nil).GetLastExpense), ctx)
}

// GetLastUser mocks base method.
func (m *MockRepository) GetLastUser(ctx context.Context) (*persistence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUser", ctx)
	ret0, _ := ret[0].(*persistence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUser indicates an expected call of GetLastUser.
func (mr *MockRepositoryMockRecorder) GetLastUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUser", reflect.TypeOf((*MockRepository)(nil).GetLastUser), ctx)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, id int32) (*persistence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*persistence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, id)
}

// GetUserByEmail mocks base method.
func (m *MockRepository) GetUserByEmail(ctx context.Context, email string) (*persistence.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*persistence.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepository)(nil).GetUserByEmail), ctx, email)
}

// ListExpenses mocks base method.
func (m *MockRepository) ListExpenses(ctx context.Context) ([]*persistence.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpenses", ctx)
	ret0, _ := ret[0].([]*persistence.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpenses indicates an expected call of ListExpenses.
func (mr *MockRepositoryMockRecorder) ListExpenses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpenses", reflect.TypeOf((*MockRepository)(nil).ListExpenses), ctx)
}

// UpdateExpense mocks base method.
func (m *MockRepository) UpdateExpense(ctx context.Context, arg *persistence.UpdateExpenseParams) (*persistence.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpense", ctx, arg)
	ret0, _ := ret[0].(*persistence.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExpense indicates an expected call of UpdateExpense.
func (mr *MockRepositoryMockRecorder) UpdateExpense(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpense", reflect.TypeOf((*MockRepository)(nil).UpdateExpense), ctx, arg)
}
