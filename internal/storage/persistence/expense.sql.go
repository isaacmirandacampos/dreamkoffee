// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: expense.sql

package persistence

import (
	"context"

	"github.com/shopspring/decimal"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (
  name, price
) VALUES (
  $1, $2
) RETURNING id, price, name, created_at, updated_at, deleted_at
`

type CreateExpenseParams struct {
	Name  string          `db:"name" json:"name"`
	Price decimal.Decimal `db:"price" json:"price"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense, arg.Name, arg.Price)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getExpense = `-- name: GetExpense :one
SELECT id, price, name, created_at, updated_at, deleted_at FROM expenses WHERE id = $1 and deleted_at is null
`

func (q *Queries) GetExpense(ctx context.Context, id int32) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, price, name, created_at, updated_at, deleted_at FROM expenses where deleted_at is null ORDER BY id desc
`

func (q *Queries) ListExpenses(ctx context.Context) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpenses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses
SET name = $1, price = $2, updated_at = now()
WHERE id = $3 and deleted_at is null RETURNING id, price, name, created_at, updated_at, deleted_at
`

type UpdateExpenseParams struct {
	Name  string          `db:"name" json:"name"`
	Price decimal.Decimal `db:"price" json:"price"`
	ID    int32           `db:"id" json:"id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, updateExpense, arg.Name, arg.Price, arg.ID)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
