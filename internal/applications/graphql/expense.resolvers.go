package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/isaacmirandacampos/finkoffee/internal/applications/graphql/model"
	"github.com/isaacmirandacampos/finkoffee/internal/usescases/expense"
)

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input model.NewExpense) (*model.Expense, error) {
	return expense.NewExpenseUseCase(r.Conn).CreateExpense(ctx, input)
}

// UpdateExpense is the resolver for the updateExpense field.
func (r *mutationResolver) UpdateExpense(ctx context.Context, id int, input model.UpdateExpense) (*model.Expense, error) {
	return expense.NewExpenseUseCase(r.Conn).UpdateExpense(ctx, &id, input)
}

// ListExpense is the resolver for the listExpense field.
func (r *queryResolver) ListExpense(ctx context.Context) ([]*model.Expense, error) {
	return expense.NewExpenseUseCase(r.Conn).ListExpenses(ctx)
}

// GetExpense is the resolver for the getExpense field.
func (r *queryResolver) GetExpense(ctx context.Context, id int) (*model.Expense, error) {
	return expense.NewExpenseUseCase(r.Conn).GetExpense(ctx, &id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
