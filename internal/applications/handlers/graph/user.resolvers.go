package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/isaacmirandacampos/dreamkoffee/internal/applications/handlers/graph/model"
	"github.com/isaacmirandacampos/dreamkoffee/internal/applications/usecases/user"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	result, err := user.NewExpenseUseCase(r.Repo).CreateUser(ctx, &input)
	if err != nil {
		graphql.AddError(ctx, err)
	}
	return result, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Authentication) (*model.AuthenticationResponse, error) {
	result, err := user.NewExpenseUseCase(r.Repo).Authenticate(ctx, input.Email, input.Password)
	if err != nil {
		graphql.AddError(ctx, err)
	}
	return result, nil
}
